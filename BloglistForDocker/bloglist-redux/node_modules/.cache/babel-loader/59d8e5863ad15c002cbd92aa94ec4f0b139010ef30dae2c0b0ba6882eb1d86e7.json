{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    setBlogs(state, action) {\n      return action.payload;\n    },\n    appendBlog(state, action) {\n      state.push(action.payload);\n    }\n  }\n});\nexport const {\n  setBlogs,\n  appendBlog\n} = blogSlice.actions;\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const createBlog = (blogObject, blogFormRef) => {\n  return async dispatch => {\n    blogFormRef.current.toggleVisibility();\n    const returnedBlog = await blogService.create(blogObject);\n    dispatch(appendBlog(returnedBlog));\n  };\n};\nexport const deleteBlog = (blogObject, blogs) => {\n  return async dispatch => {\n    await blogService.remove(blogObject.id);\n    const returnedBlogs = blogs.filter(n => n.id !== blogObject.id);\n    dispatch(setBlogs(returnedBlogs));\n  };\n};\nexport const updateLike = (blogObject, blogs) => {\n  return async dispatch => {\n    const result = await blogService.updateLike(blogObject.id);\n    const newBlogs = blogs.map(original => {\n      return original.id === blogObject.id ? result : original;\n    });\n    dispatch(setBlogs(newBlogs));\n  };\n};\nexport const updateComment = (blogId, newComment, blogs) => {\n  return async dispatch => {\n    const result = await blogService.updateComment(blogId, newComment);\n    const newBlogs = blogs.map(original => {\n      return original.id === blogId ? result : original;\n    });\n    dispatch(setBlogs(newBlogs));\n  };\n};\nexport default blogSlice.reducer;","map":{"version":3,"names":["createSlice","blogService","blogSlice","name","initialState","reducers","setBlogs","state","action","payload","appendBlog","push","actions","initializeBlogs","dispatch","blogs","getAll","createBlog","blogObject","blogFormRef","current","toggleVisibility","returnedBlog","create","deleteBlog","remove","id","returnedBlogs","filter","n","updateLike","result","newBlogs","map","original","updateComment","blogId","newComment","reducer"],"sources":["/usr/src/app/src/reducers/blogReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport blogService from '../services/blogs'\n\nconst blogSlice = createSlice({\n    name: 'blogs',\n    initialState: [],\n    reducers: {\n        setBlogs(state, action) {\n            return action.payload\n        },\n        appendBlog(state, action) {\n            state.push(action.payload)\n        },\n    },\n})\n\nexport const { setBlogs, appendBlog } = blogSlice.actions\n\nexport const initializeBlogs = () => {\n    return async (dispatch) => {\n        const blogs = await blogService.getAll()\n        dispatch(setBlogs(blogs))\n    }\n}\n\nexport const createBlog = (blogObject, blogFormRef) => {\n    return async (dispatch) => {\n        blogFormRef.current.toggleVisibility()\n        const returnedBlog = await blogService.create(blogObject)\n        dispatch(appendBlog(returnedBlog))\n    }\n}\n\nexport const deleteBlog = (blogObject, blogs) => {\n    return async (dispatch) => {\n        await blogService.remove(blogObject.id)\n        const returnedBlogs = blogs.filter((n) => n.id !== blogObject.id)\n        dispatch(setBlogs(returnedBlogs))\n    }\n}\n\nexport const updateLike = (blogObject, blogs) => {\n    return async (dispatch) => {\n        const result = await blogService.updateLike(blogObject.id)\n        const newBlogs = blogs.map((original) => {\n            return original.id === blogObject.id ? result : original\n        })\n        dispatch(setBlogs(newBlogs))\n    }\n}\n\nexport const updateComment = (blogId, newComment, blogs) => {\n    return async (dispatch) => {\n        const result = await blogService.updateComment(blogId, newComment)\n        const newBlogs = blogs.map((original) => {\n            return original.id === blogId ? result : original\n        })\n        dispatch(setBlogs(newBlogs))\n    }\n}\n\nexport default blogSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,WAAW,MAAM,mBAAmB;AAE3C,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,QAAQ,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpB,OAAOA,MAAM,CAACC,OAAO;IACzB,CAAC;IACDC,UAAU,CAACH,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACI,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IAC9B;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,QAAQ;EAAEI;AAAW,CAAC,GAAGR,SAAS,CAACU,OAAO;AAEzD,OAAO,MAAMC,eAAe,GAAG,MAAM;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,KAAK,GAAG,MAAMd,WAAW,CAACe,MAAM,EAAE;IACxCF,QAAQ,CAACR,QAAQ,CAACS,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,CAACC,UAAU,EAAEC,WAAW,KAAK;EACnD,OAAO,MAAOL,QAAQ,IAAK;IACvBK,WAAW,CAACC,OAAO,CAACC,gBAAgB,EAAE;IACtC,MAAMC,YAAY,GAAG,MAAMrB,WAAW,CAACsB,MAAM,CAACL,UAAU,CAAC;IACzDJ,QAAQ,CAACJ,UAAU,CAACY,YAAY,CAAC,CAAC;EACtC,CAAC;AACL,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,CAACN,UAAU,EAAEH,KAAK,KAAK;EAC7C,OAAO,MAAOD,QAAQ,IAAK;IACvB,MAAMb,WAAW,CAACwB,MAAM,CAACP,UAAU,CAACQ,EAAE,CAAC;IACvC,MAAMC,aAAa,GAAGZ,KAAK,CAACa,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACH,EAAE,KAAKR,UAAU,CAACQ,EAAE,CAAC;IACjEZ,QAAQ,CAACR,QAAQ,CAACqB,aAAa,CAAC,CAAC;EACrC,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG,CAACZ,UAAU,EAAEH,KAAK,KAAK;EAC7C,OAAO,MAAOD,QAAQ,IAAK;IACvB,MAAMiB,MAAM,GAAG,MAAM9B,WAAW,CAAC6B,UAAU,CAACZ,UAAU,CAACQ,EAAE,CAAC;IAC1D,MAAMM,QAAQ,GAAGjB,KAAK,CAACkB,GAAG,CAAEC,QAAQ,IAAK;MACrC,OAAOA,QAAQ,CAACR,EAAE,KAAKR,UAAU,CAACQ,EAAE,GAAGK,MAAM,GAAGG,QAAQ;IAC5D,CAAC,CAAC;IACFpB,QAAQ,CAACR,QAAQ,CAAC0B,QAAQ,CAAC,CAAC;EAChC,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,CAACC,MAAM,EAAEC,UAAU,EAAEtB,KAAK,KAAK;EACxD,OAAO,MAAOD,QAAQ,IAAK;IACvB,MAAMiB,MAAM,GAAG,MAAM9B,WAAW,CAACkC,aAAa,CAACC,MAAM,EAAEC,UAAU,CAAC;IAClE,MAAML,QAAQ,GAAGjB,KAAK,CAACkB,GAAG,CAAEC,QAAQ,IAAK;MACrC,OAAOA,QAAQ,CAACR,EAAE,KAAKU,MAAM,GAAGL,MAAM,GAAGG,QAAQ;IACrD,CAAC,CAAC;IACFpB,QAAQ,CAACR,QAAQ,CAAC0B,QAAQ,CAAC,CAAC;EAChC,CAAC;AACL,CAAC;AAED,eAAe9B,SAAS,CAACoC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}